{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACMJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKtB,SACI,uBACAO,KAAK,OACLC,YAAY,SACZC,MAASV,EACTW,SAlBkB,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,mCACA,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,UCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACrB,ECDwB,SAACA,GACzB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAhB,GACEc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAGtB,CAACpB,IAGGqB,EDhByBI,CAAazB,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,4DAAd,SAA2EhB,IAC1EoB,GAAW,mBAAGJ,UAAU,wCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEVhBe,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACA,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MCf3B4B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.5981820d.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)                     //obtengo todo lo que entra en el input\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();         //previene que se recargue la pagina con el submit(recibe el evento del enter)\r\n            if (inputValue.trim().length > 2){\r\n                setCategories(cats => [inputValue, ...cats,]);\r\n                setInputValue('');\r\n            }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>           \r\n            <input\r\n            type=\"text\"\r\n            placeholder='Buscar'\r\n            value = {inputValue}              //el value se va actualizando\r\n            onChange = {handleInputChange}         //onChange genera los cambios enviadole el evento al setState\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=09&api_key=eXIAnREmE6Hil2PSha3WRkp7BR5qa3sz`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <>\r\n        <div className='card animate__animated animate__fadeInDown'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className='card animate__animated animate__flipInY animate__delay-1s'>{category}</h3>\r\n        {loading && <p className='card animate__animated animate__flash'>Loading</p>}\r\n\r\n        <div className='card-grid'>\r\n            {\r\n                images.map(img => (\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    {...img}/>   //aqui estoy mandando cada propiedad de las props como propiedad independiente\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","//esto es un hook inicia con use el nombre - es una funcion\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) =>{        \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{               //se hace el efecto para que solo cambie cuando cambie la categoria\r\n        getGifs(category)         //hace la peticion http\r\n        .then(gifs =>{          \r\n                setstate({             //ponemos timeout intencional\r\n                    data: gifs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state;      //{data:[], loading: true}:\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n //functional component React\r\n\r\n\r\nexport const GitExpertApp = () => {   \r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n    \r\n    return (\r\n    <>\r\n        <h2>GitExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr />\r\n        \r\n        <ol>\r\n            {\r\n                categories.map(category => (\r\n                    <GifGrid \r\n                    key = {category}\r\n                    category = {category}\r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GitExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  // <React.StrictMode>                // React lo pone por defecto para ser mas estricto. \n    <GitExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}